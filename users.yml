openapi: 3.0.3
info:
  title: Users API
  description: API endpoints for managing users
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8082/api/v1
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users
      operationId: getAllUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of users to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
        - name: offset
          in: query
          required: false
          description: Number of users to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
                    example: 150
                  limit:
                    type: integer
                    description: Limit applied to the request
                    example: 10
                  offset:
                    type: integer
                    description: Offset applied to the request
                    example: 0
              example:
                users:
                  - id: 1
                    name: "John Doe"
                    email: "john.doe@example.com"
                    phone: "+1-555-123-4567"
                  - id: 2
                    name: "Jane Smith"
                    email: "jane.smith@example.com"
                    phone: "+1-555-987-6543"
                total: 150
                limit: 10
                offset: 0
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "INVALID_REQUEST"
                message: "Invalid limit or offset parameters"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "INTERNAL_ERROR"
                message: "Internal server error"

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their unique identifier
      operationId: getUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 123
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 123
                name: "John Doe"
                email: "john.doe@example.com"
                phone: "+1-555-123-4567"
        '400':
          description: Invalid user ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "INVALID_REQUEST"
                message: "Invalid user ID"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "NOT_FOUND"
                message: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "INTERNAL_ERROR"
                message: "Internal server error"

components:
  schemas:
    User:
      type: object
      description: User details
      required:
        - id
        - name
        - email
        - phone
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        phone:
          type: string
          description: Phone number of the user
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1-555-123-4567"

    ErrorResponse:
      type: object
      description: Standard error response structure
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code identifying the type of error
          enum:
            - INVALID_REQUEST
            - NOT_FOUND
            - CONFLICT
            - INTERNAL_ERROR
          example: "NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "User not found"

tags:
  - name: users
    description: Operations related to users 